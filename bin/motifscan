#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2014-2017, Hongduo Sun, Jiawei Wang, Zhen Shao
#
# This file is part of MotifScan.
#
# MotifScan is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# MotifScan is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MotifScan.  If not, see <http://www.gnu.org/licenses/>.

""" MotifScan main command line script."""

import sys
import logging
import argparse

from motifscan import __version__
from motifscan.io.constants import PEAK_FORMAT
from motifscan.workflow import motifscan_run


def argparser_config():
    """Configure the arguments parser.
    """
    description = """%(prog)s -- MotifScan: A motif discovery tool to search for candidate targets of given motifs."""
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--version', action='version', version="%(prog)s {}".format(__version__))
    group_input = parser.add_argument_group("Input arguments")
    group_input.add_argument('-p', '--peak', dest='peak', type=str, required=True,
                             help="Required input genomic regions file to scan motifs on.")
    group_input.add_argument('-f', '--format', dest='format', type=str, default="bed5col", choices=PEAK_FORMAT,
                             help="Format of input genomic regions. See documents for more information.")
    group_input.add_argument('-m', '--motif', dest='motif', type=str, required=True,
                             help="Required pre-compiled motif file, which is generated by 'motifcompile'.")
    group_input.add_argument('-g', '--genome', dest='genome', type=str, required=True,
                             help="Required genome directory, which contains genome sequence and chromosome length. "
                                  "You can run 'genomecompile' to generate the directory.")
    group_input.add_argument('-a', '--annotation', dest='gene', type=str,
                             help="Gene annotation file, which is used to generate random controls when performing "
                                  "enrichment analysis. Sequence features on promoters are very different from those "
                                  "on whole genome. We will pick up random control regions with similar genomic "
                                  "locations for each input region instead of the whole genome.")

    group_advance = parser.add_argument_group("Advanced arguments")
    group_advance.add_argument('-l', '--motif_list', dest='motif_list', type=str,
                               help="Motif list file. If specified, the program will only perform MotifScan on given "
                                    "motifs in this list.")
    group_advance.add_argument('-e', '--no_enrichment', dest='enrichment_flag', action='store_false', default=True,
                               help="If set, MotifScan will neither generate random control regions nor perform "
                                    "enrichment analysis.")
    group_advance.add_argument('-c', '--control', dest='control_file', type=str,
                               help="User specified control regions.")
    group_advance.add_argument('--cformat', dest='control_format', type=str, default="bed5col", choices=PEAK_FORMAT,
                               help="Format of control regions (same as -f for input regions).")
    group_advance.add_argument('-r', dest='location', type=str, default='all',
                               choices=['all', 'promoter', 'distal', 'gene'],
                               help="Genomic location to apply MotifScan. "
                                    "'all': perform MotifScan on the all input regions. "
                                    "'promoter': perform MotifScan on regions which located at promoter regions. "
                                    "'distal': perform MotifScan on regions which located at distal regions. "
                                    "'gene': perform MotifScan on regions which is the target(nearest one) of genes "
                                    "within 10kbp distance cutoff.")
    group_advance.add_argument('--upstream', dest='upstream', type=int, default=4000,
                               help="Upstream distance to TSS to define promoter regions. "
                                    "Valid when option -r is set as 'promoter' or 'distal'.")
    group_advance.add_argument('--downstream', dest='downstream', type=int, default=2000,
                               help="Upstream distance to TSS to define promoter regions. "
                                    "Valid when option -r is set as 'promoter' or 'distal'.")
    group_advance.add_argument('--random_times', dest='random_times', type=int, default=5,
                               help="The number of random control regions generated for each input region. For example,"
                                    " if you provide 1000 regions, 5000 random regions will be generated by default.")
    group_advance.add_argument('--peak_length', dest='peak_length', type=int, default=1000,
                               help="The length of input regions to perform MotifScan around peak summit/midpoint. "
                                    "If set to 0, the whole peak region is used to perform MotifScan.")

    group_output = parser.add_argument_group("Output arguments")
    group_output.add_argument('-s', '--target_site', dest='target_site_flag', action='store_true', default=False,
                              help="If set, MotifScan will report the sequence and position of each target.")
    group_output.add_argument('-o', dest='output_dir', type=str, required=True,
                              help="Output directory to the write the results. If unspecified, the results will be "
                                   "written to 'motifscan_output_PREFIX_OF_INPUT_REGION' under working directory.")
    return parser


def main():
    """Main function of MotifScan procedure.
    """
    logging.basicConfig(level=logging.INFO, format="%(levelname)-8s @%(asctime)s: %(message)s", stream=sys.stderr,
                        datefmt="%m/%d/%Y %H:%M", filemode="w")
    parser = argparser_config()
    args = parser.parse_args()
    genome_dir = args.genome
    gene_file = args.gene
    motif_file = args.motif
    motif_filter_file = args.motif_list
    peak_file = args.peak
    peak_format = args.format
    peak_length = args.peak_length
    control_file = args.control_file
    control_format = args.control_format
    location = args.location
    upstream = args.upstream
    downstream = args.downstream
    random_times = args.random_times
    enrichment_flag = args.enrichment_flag
    target_site_flag = args.target_site_flag
    output_dir = args.output_dir
    motifscan_run(genome_dir=genome_dir, gene_file=gene_file, motif_file=motif_file, motif_filter_file=motif_filter_file,
                  peak_file=peak_file, peak_format=peak_format, peak_length=peak_length, control_file=control_file,
                  control_format=control_format, location=location, upstream=upstream, downstream=downstream,
                  random_times=random_times, enrichment_flag=enrichment_flag, target_site_flag=target_site_flag,
                  output_dir=output_dir)
    return


if __name__ == '__main__':
    main()
